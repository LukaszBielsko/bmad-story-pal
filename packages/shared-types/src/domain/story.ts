export interface Story {
  id: string;
  title: string;
  content: StoryContent;
  theme: StoryTheme;
  childProfileId: string;
  generationRequestId: string;
  status: StoryStatus;
  metadata: StoryMetadata;
  safetyReview: SafetyReview;
  userActions: UserStoryActions;
  createdAt: Date;
  updatedAt: Date;
}

export interface StoryContent {
  text: string;
  chapters?: StoryChapter[];
  illustrations?: StoryIllustration[];
  readingTime: number; // minutes
  wordCount: number;
}

export interface StoryChapter {
  id: string;
  title: string;
  content: string;
  order: number;
  illustrations?: StoryIllustration[];
}

export interface StoryIllustration {
  id: string;
  url: string;
  alt: string;
  position: 'cover' | 'chapter' | 'inline';
  chapterId?: string;
}

export interface StoryTheme {
  id: string;
  name: string;
  description: string;
  category: ThemeCategory;
  ageRange: AgeRange;
  tags: string[];
  illustrationStyle: IllustrationStyle;
}

export enum ThemeCategory {
  ADVENTURE = 'adventure',
  FANTASY = 'fantasy',
  FRIENDSHIP = 'friendship',
  LEARNING = 'learning',
  BEDTIME = 'bedtime',
  FAMILY = 'family',
  ANIMALS = 'animals',
  SCIENCE = 'science',
}

export interface AgeRange {
  min: number;
  max: number;
}

export enum IllustrationStyle {
  CARTOON = 'cartoon',
  REALISTIC = 'realistic',
  WATERCOLOR = 'watercolor',
  DIGITAL_ART = 'digital_art',
}

export enum StoryStatus {
  GENERATING = 'generating',
  PENDING_REVIEW = 'pending_review',
  APPROVED = 'approved',
  REJECTED = 'rejected',
  PUBLISHED = 'published',
}

export interface StoryMetadata {
  generationPrompt: string;
  personalizations: StoryPersonalization[];
  difficulty: DifficultyLevel;
  moralLesson?: string;
  keywords: string[];
}

export interface StoryPersonalization {
  type: PersonalizationType;
  value: string;
  applied: boolean;
}

export enum PersonalizationType {
  CHILD_NAME = 'child_name',
  FAVORITE_COLOR = 'favorite_color',
  PET_NAME = 'pet_name',
  HOBBY = 'hobby',
  FRIEND_NAME = 'friend_name',
  LOCATION = 'location',
}

export enum DifficultyLevel {
  VERY_EASY = 'very_easy',
  EASY = 'easy',
  MEDIUM = 'medium',
  HARD = 'hard',
}

export interface SafetyReview {
  status: SafetyStatus;
  moderationResults: ModerationResult[];
  reviewedAt: Date;
  reviewedBy: string; // 'system' or user ID
  flags: SafetyFlag[];
}

export enum SafetyStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  FLAGGED = 'flagged',
  REJECTED = 'rejected',
}

export interface ModerationResult {
  service: string; // 'openai', 'custom', etc.
  result: any;
  flagged: boolean;
  categories: string[];
  confidence: number;
}

export interface SafetyFlag {
  type: FlagType;
  severity: FlagSeverity;
  description: string;
  autoGenerated: boolean;
}

export enum FlagType {
  INAPPROPRIATE_CONTENT = 'inappropriate_content',
  VIOLENCE = 'violence',
  SCARY_CONTENT = 'scary_content',
  ADULT_THEMES = 'adult_themes',
  DISCRIMINATION = 'discrimination',
}

export enum FlagSeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

export interface UserStoryActions {
  saved: boolean;
  favorite: boolean;
  rating?: number; // 1-5 stars
  readCount: number;
  lastReadAt?: Date;
  completedAt?: Date;
  bookmarkedPage?: number;
}

